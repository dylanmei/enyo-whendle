(function() {  var dock = {    name: "Dock",    kind: "VFlexBox",    components: [      { name: 'overlay', className: 'dimness' },      { kind: 'SlippyMap',        name: 'map',        tracking: true,        onPan: 'panHandler',        onTap: 'tapHandler'      },      { name: 'clock', className: 'clock', components: [        { name: 'time', className: 'time' },        { name: 'date', className: 'date' }      ]},      { name: 'toolbar', kind: 'Toolbar', pack: 'justify', components: [        { flex: 1 },        { kind: 'Dimmer',          name: 'dimmer',          maximum: 0.90,          position: 0.0,          onChanged: 'dimmerHandler',          onChanging: 'dimmerHandler'        },        { flex: 1 }      ]},      { kind: 'Preferences', name: 'preferences', onLoad: 'preferencesHandler' }    ],    create: function() {      this.inherited(arguments);      _.defer(Timekeeping.tick);      _.observe('clock:tick', _.bind(on_clock_tick, this));      this.time_formatter = new enyo.g11n.DateFmt({time:'short'});      this.date_formatter = new enyo.g11n.DateFmt({format:'EEEE, MMMM d'});      enyo.setAllowedOrientation("landscape");    },    rendered: function() {      this.inherited(arguments);      defer_hiding_the_toolbar.call(this, 1);      var node = this.hasNode(),          latitude = 30, longitude = 0;      this.$.map        .zoom(2)        .pan(latitude, longitude)        .size(node.offsetWidth, node.offsetHeight);    },    preferencesHandler: function() {      var dimness = this.$.preferences.getDockDimness();      if (dimness || dimness == 0) {        this.$.dimmer.setPosition(dimness);        on_dimness_changed.call(this, dimness);      }      var location = this.$.preferences.getMapLocation();      if (_.isLocation(location))        this.$.map.pan(location.latitude, location.longitude);    },    panHandler: function(sender, e) {      defer_updating_the_location.call(this, e.location);    },    tapHandler: function(sender, e) {      var toolbar = this.$.toolbar;      if (!toolbar.hasClass('hide-toolbar'))        hide_the_toolbar.call(this);      else {        toolbar.removeClass('hide-toolbar');        defer_hiding_the_toolbar.call(this);      }    },    dimmerHandler: function(sender, value) {      defer_hiding_the_toolbar.call(this);      on_dimness_changed.call(this, value);    }  };  function on_dimness_changed(value) {      var text_brightness = 1 - (value / 2);      this.$.clock.applyStyle('opacity', text_brightness);      this.$.overlay.applyStyle('opacity', value);  }  function on_clock_tick(e) {    if (e.declination !== undefined)      this.$.map.time(e.now, e.declination);    var local = e.now      .add((e.offset).minutes);    this.$.time.setContent(      this.time_formatter.format(local)    );    this.$.date.setContent(      this.date_formatter.format(local)    );  }  function defer_updating_the_location(location) {    if (!this._on_location_changed) {      var preferences = this.$.preferences;      this._on_location_changed = _.debounce(function(value) {        preferences.setMapLocation(value);      }, (1).seconds);    }    this._on_location_changed(location);      }  function defer_hiding_the_toolbar(seconds) {    if (this.timer) clearTimeout(this.timer);    this.timer = setTimeout(      _.bind(hide_the_toolbar, this), (seconds || 5).seconds);  }  function hide_the_toolbar() {    var dimmer = this.$.dimmer;    var toolbar = this.$.toolbar;    if (this.timer) clearTimeout(this.timer);    delete this.timer;    this.$.preferences.setDockDimness(      dimmer.position    );    toolbar.addClass('hide-toolbar');  }  enyo.kind(dock);})();