Promise = (function() {  var nil, noop = function(){};  function Promise() {    var self = this;    this.callbacks = [];    this.resolve = function(result) {      invoke('resolve', self.callbacks, result);    };    this.reject = function(result) {      invoke('reject', self.callbacks, result);    };  }  Promise.prototype = {    then: function(success, failure, complete) {      this.callbacks.push({        resolve:  success || noop,        reject:   failure || noop,        dispose:  complete      });      return this;    },    success: function(handler) {      return this.then(handler, nil, nil);    },    failure: function(handler) {      return this.then(nil, handler, nil);    },    complete: function(handler) {      return this.then(nil, nil, handler);    }  };  function invoke(type, callbacks, result) {    while (callbacks[0]) {      var callback = callbacks.shift();      callback[type](result);      var complete = callback['dispose'];      if (complete) complete(result);    }  }  Promise.Queue = function() {    this.promises = [];    this.handler = null;  }  Promise.Queue.prototype = {    up: function(p) {      var self = this;      this.promises.push(p);      p.complete(function() {        for (var i = 0; i < self.promises.length; i++) {          if (self.promises[i] != p) continue;          self.promises.splice(i, 1);        }        if (self.promises.length == 0) {          if (self.handler) {            self.handler();            self.handler = null;          }        }      });      return this;    },    complete: function(handler) {      if (this.promises.length) this.handler = handler;      else handler();    }  }  return Promise;})();