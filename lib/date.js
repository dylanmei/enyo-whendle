(function() {  Date.now = function() {    return new Date();  };  Date.today = function() {    return new Date().second(0).minute(0).hour(0);  };  Date.prototype.copy = function() {    return new Date(this.getTime());  };  Date.prototype.compare = function(date) {    var t1 = this.getTime();    var t2 = date.getTime();    return t1 == t2 ? 0 : t1 < t2 ? -1 : 1;  };  Date.prototype.year = function(n) {    return (n === undefined)      ? this.getFullYear()      : operate(this, function(copy) { copy.setFullYear(n); });  };  Date.prototype.month = function(n) {    return (n === undefined)      ? this.getMonth() + 1      : operate(this, function(copy) { copy.setMonth(n - 1); });  };  Date.prototype.day = function(n) {    return (n === undefined)      ? this.getDate()      : operate(this, function(copy) { copy.setDate(n); });  };  Date.prototype.hour = function(n) {    return (n === undefined)      ? this.getHours()      : operate(this, function(copy) { copy.setHours(n); });  };  Date.prototype.minute = function(n) {    return (n === undefined)      ? this.getMinutes()      : operate(this, function(copy) { copy.setMinutes(n); });  };  Date.prototype.second = function(n) {    return (n === undefined)      ? this.getSeconds()      : operate(this, function(copy) { copy.setSeconds(n); });  };  Date.prototype.millisecond = function(n) {    return (n === undefined)      ? this.getMilliseconds()      : operate(this, function(copy) { copy.setMilliseconds(n); });  };  Date.prototype.utc = function() {    return new Date(      this.getUTCFullYear(),      this.getUTCMonth(),      this.getUTCDate(),      this.getUTCHours(),      this.getUTCMinutes(),      this.getUTCSeconds()    );  };  Date.prototype.add = function(ms) {    return operate(this, function(copy) { copy.setMilliseconds(ms + copy.getMilliseconds()) });  };  Date.prototype.subtract = function(ms) {    return this.add(-ms);  };  function operate(date, op) {    var copy = date.copy();    if (typeof(op) == "function") op(copy);    return copy;  }  Number.prototype.__defineGetter__('days', function() {    return this * 86400000;  });  Number.prototype.__defineGetter__('hours', function() {    return this * 3600000;  });  Number.prototype.__defineGetter__('minutes', function() {    return this * 60000;  });  Number.prototype.__defineGetter__('seconds', function() {    return this * 1000;  });  Date.prototype.__defineGetter__('iso', function() {    return this.year() + '-'      + pad_number(this.month()) + '-'      + pad_number(this.day()) + 'T'      + pad_number(this.hour()) + ':'      + pad_number(this.minute()) + ':'      + pad_number(this.second()) + 'Z';  });  Date.prototype.__defineGetter__('sys', function() {    var d = this.utc();    return ''      + pad_number(d.month()) + '/'      + pad_number(d.day()) + '/'      + d.year() + ' '      + pad_number(d.hour()) + ':'      + pad_number(d.minute()) + ':'      + pad_number(d.second());  });  function pad_number(n) {    return n < 10 ? '0' + n : n.toString();  }})();