Database = (function() {  var DB = 'palm://com.palm.db/';  function Wrapper() {  }  Wrapper.prototype.find = function(query, count) {    var p = new Promise(),        params = {          'query': query, 'count': count || false        };    PalmCall.call(DB, 'find', params)      .then(function(f) {        var result = f.result;        result.returnValue           // {returnValue, results, count, next}          ? p.resolve(result)           // {returnValue, errorCode, errorText}          : p.reject(result);      }, exception_handler(p));    return p;  };  Wrapper.prototype.insert = function(obj) {    var p = new Promise(),        params = { 'objects': [obj] };    PalmCall.call(DB, 'put', params)      .then(function(f) {        var result = f.result;        result.returnValue           // {returnValue, results: [id, rev]}          ? p.resolve({id: first_id_or_blank(result.results)})           // {returnValue, errorCode, errorText}          : p.reject(result);      }, exception_handler(p));    return p;  };  Wrapper.prototype.update = function(obj) {    var p = new Promise(),        params = { 'objects': [obj] };    PalmCall.call(DB, 'merge', params)      .then(function(f) {        var result = f.result;        result.returnValue           // {returnValue, results: [id, rev]}          ? p.resolve({id: first_id_or_blank(result.results)})           // {returnValue, errorCode, errorText}          : p.reject(result);      }, exception_handler(p));    return p;  };  Wrapper.prototype.remove = function(id) {    var p = new Promise(),        params = { 'ids': [id], 'purge': true };    PalmCall.call(DB, 'del', params)      .then(function(f) {        var result = f.result;        result.returnValue           // {returnValue, results: [id, rev]}          ? p.resolve({id: first_id_or_blank(result.results)})           // {returnValue, errorCode, errorText}          : p.reject(result);      }, exception_handler(p));    return p;  };  function first_id_or_blank(results) {    return (results && results.length)      ? results[0].id : '';  }  function exception_handler(p) {    return function(f) {      var e = f.exception;      var m = typeof(e) == 'string' ? e : e.message;      p.reject({error: true, message: m});    };  }  return new Wrapper();})();